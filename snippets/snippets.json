{
  "remix module": {
    "prefix": "rmx-mod",
    "description": "Remix module starter",
    "body": [
      "import * as React from 'react'",
      "import type {LoaderFunction, ActionFunction} from 'remix'",
      "import {json, redirect, useRouteData, Form} from 'remix'",
      "",
      "type LoaderData = {}",
      "",
      "export const loader: LoaderFunction = async () => {",
      "  const data: LoaderData = {}",
      "  return json(data)",
      "}",
      "",
      "export const action: ActionFunction = async ({request}) => {",
      "  return redirect(new URL(request.url).pathname)",
      "}",
      "",
      "export default function ${0:Screen}() {",
      "  const data = useRouteData<LoaderData>()",
      "  return (",
      "    <div>",
      "      {`This is a screen and it is great. Here's the data`}",
      "      <pre>{JSON.stringify(data, null, 2)}</pre>",
      "      <Form method=\"post\" noValidate>",
      "        <button type=\"submit\">submit</button>",
      "      </Form>",
      "    </div>",
      "  )",
      "}",
      "",
      "export function ErrorBoundary({error}: {error: Error}) {",
      "  return (",
      "    <div>",
      "      <h1>Error</h1>",
      "      <pre>{error.stack}</pre>",
      "    </div>",
      "  )",
      "}"
    ]
  },
  "remix-simple-context": {
    "prefix": "rmx-scon",
    "description": "A simple context creator that doesn't allow any logic",
    "body": [
      "function createSimpleContext<ContextType>(name: string) {",
      "  const defaultValue = Symbol(`Default ${name} context value`)",
      "  const Context =",
      "    React.createContext<ContextType | null | typeof defaultValue>(defaultValue)",
      "  Context.displayName = name",
      "",
      "  function useValue() {",
      "    const user = React.useContext(Context)",
      "    if (user === defaultValue) {",
      "      throw new Error(`use${name} must be used within ${name}Provider`)",
      "    }",
      "    if (!user) {",
      "      throw new Error(",
      "        `No value in ${name}Provider context. If the value is optional in this situation, try useOptional${name} instead of use${name}`,",
      "      )",
      "    }",
      "    return user",
      "  }",
      "",
      "  function useOptionalValue() {",
      "    const user = React.useContext(Context)",
      "    if (user === defaultValue) {",
      "      throw new Error(`useOptional${name} must be used within ${name}Provider`)",
      "    }",
      "    return user",
      "  }",
      "",
      "  return {Provider: Context.Provider, useValue, useOptionalValue}",
      "}",
      "",
      "const {",
      "  Provider: UserProvider,",
      "  useValue: useUser,",
      "  useOptionalValue: useOptionalUser,",
      "} = createSimpleContext<User>('User')",
      "",
      "// then elsewhere:",
      "  ",
      "export default function AppWithProviders() {",
      "  const data = useRouteData<LoaderData>()",
      "  return (",
      "    <UserProvider value={data.user}>",
      "      {/* ... */}",
      "    </UserProvider>",
      "  )",
      "}",
      "",
      "// and then in a child route somewhere:",
      "  ",
      "export default function RequiresAUser() {",
      "  const user = useUser()",
      "  // ...",
      "}",
      "  ",
      "// and in another one where the user is optional:",
      "  ",
      "function UserIsOptional() {",
      "  const user = useOptionalUser()",
      "  // ...",
      "}"
    ]
  },
  "remix-resource-route": {
    "prefix": "rmx-rsr",
    "description": "route loader for files/json/webhooks/dynamic generation",
    "body": [
      "export function loader({ ${1:{params} }) {",
      "  const ${2:pdf} = await ${3:generateReportPDF}(${4:report});",
      "  return new Response($2, {",
      "    status: ${5:200},",
      "    headers: {",
      "      \"${6:Content-Type}\": \"${7:application/pdf}\"",
      "    }",
      "  });",
      "}"
    ]
  },
  "remix-resource-route-action": {
    "prefix": "rmx-rsra",
    "description": "To handle POST, PUT, PATCH or DELETE requests export an action function",
    "body": [
      "import type { ActionFunction } from \"remix\";",
      "",
      "export const action: ActionFunction = ({ request }) => {",
      "  switch (request.method) {",
      "    case \"POST\": {",
      "      /* handle \"POST\" */",
      "      $1",
      "    }",
      "    case \"PUT\": {",
      "      /* handle \"PUT\" */",
      "      $2",
      "    }",
      "    case \"PATCH\": {",
      "      /* handle \"PATCH\" */",
      "      $3",
      "    }",
      "    case \"DELETE\": {",
      "      /* handle \"DELETE\" */",
      "      $4",
      "    }",
      "  }",
      "};"
    ]
  }
}

